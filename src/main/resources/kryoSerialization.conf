akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"] // we import the extension object

  actor {
    provider = remote

    serializers{
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerialization" // No dollar at the end
    }

    serialization-bindings{
      "java.io.Serializable" = kryo // This means that every serializable object will be serialized with kryo
    }
    allow-java-serialization = off // with the above configuration In can dissable default java serialization

    // This is the namespace to configure kryo
    kryo {
      // Means that it can serialize objects with cyclic dependencies, which makes it slower
      type = "graph"
      // allow dynamic class registration in mappings
      // The alternative to incremental is 'explicit', which forces you to define mappings for all the classes
      idstrategy = "incremental"
      // transformations to apply after the object is serialized (in this case compression with lz4 and aes encryption)
      post-serialization-transformations = "lz4,aes"
      //Helps to debug it
      kryo-trace=true
      // Automatically attach the class name to the serialization
      use-manifests=true
      // This is to see how the standard classes/types are being registered
      implicit-registration-logging = true
      // This maps the class name with an id
      mappings{
        "part1.serialization.Book" = 45 // This is optional for incremental idstrategy
      }
      //
      classes = [
        "part1.serialization.Book"
      ]
    }
  }
  remote {
    artery {
      enabled = on
      transport = aeron-udp
      canonical.hostname = "localhost"
      canonical.port = 0
    }
  }
}