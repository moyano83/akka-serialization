akka {
  actor {
    provider = remote
    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      avro = "part1.serialization.VoteAvroSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    # This binds the classes to serialize with the serializers
    serialization-bindings {
      "part1.serialization.VoteEnd$" = java
      "com.google.protobuf.Message" = proto
      # "part1.serialization.Vote" = java
      # "part1.serialization.Vote" = avro
      # "part1.serialization.Vote" = kryo
      "part1.serialization.Vote" = proto
    }

    kryo{
      type = "nograph"
      idstrategy = "incremental"
      kryo-trace = false
      implicit-registration-logging = false
      use-manifests = false
      classes = ["part1.serialization.Vote", "part1.serialization.VoteEnd$"]
    }
  }
  remote{
    artery{
      enabled = on
      transport = aeron-udp
      canonical.hostname = "localhost"
      advanced{
        outbound-message-queue-size = 1000010 // Just to make sure we can send big bursts of messages
      }
    }
  }
}